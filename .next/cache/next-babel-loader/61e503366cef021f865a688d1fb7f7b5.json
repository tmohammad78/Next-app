{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from \"../saga\";\nconst sagaMiddleware = createSagaMiddleware();\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst createStoreApp = (initialState = rootInitialState) => {\n  const store = createStore(rootReducer, initialState, bindMiddleware([sagaMiddleware]));\n\n  store.runSagaTask = () => {\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n  };\n\n  store.runSagaTask();\n  return store;\n};\n\nexport default createStoreApp;","map":{"version":3,"sources":["E:/MainProject/frontend/Next-app/redux/store.ts"],"names":["applyMiddleware","createStore","createSagaMiddleware","rootSaga","sagaMiddleware","bindMiddleware","middleware","composeWithDevTools","require","createStoreApp","initialState","rootInitialState","store","rootReducer","runSagaTask","sagaTask","run"],"mappings":"AACA,SAASA,eAAT,EAA0BC,WAA1B,QAAoD,OAApD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAGA,OAAOC,QAAP;AAKA,MAAMC,cAAc,GAAGF,oBAAoB,EAA3C;;AACA,MAAMG,cAAc,GAAIC,UAAD,IAAqB;AACxC,YAA2C;AACvC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACP,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAA1B;AACH;;AACD,SAAON,eAAe,CAAC,GAAGM,UAAJ,CAAtB;AACH,CAND;;AASA,MAAMG,cAAc,GAAG,CAACC,YAAY,GAAGC,gBAAhB,KAAqC;AAExD,QAAMC,KAAK,GAAGX,WAAW,CAACY,WAAD,EAAcH,YAAd,EAA4BL,cAAc,CAAC,CAACD,cAAD,CAAD,CAA1C,CAAzB;;AAEAQ,EAAAA,KAAK,CAACE,WAAN,GAAoB,MAAM;AACtBF,IAAAA,KAAK,CAACG,QAAN,GAAiBX,cAAc,CAACY,GAAf,CAAmBb,QAAnB,CAAjB;AACH,GAFD;;AAIAS,EAAAA,KAAK,CAACE,WAAN;AACA,SAAOF,KAAP;AACH,CAVD;;AAYA,eAAeH,cAAf","sourcesContent":["\r\nimport { applyMiddleware, createStore, Store } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport reducer, { State } from '../reducer';\r\nimport { createWrapper, Context } from 'next-redux-wrapper'\r\nimport rootSaga from '../saga';\r\n\r\nexport interface SagaStore extends Store {\r\n    sagaTask?: any;\r\n}\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst bindMiddleware = (middleware: any) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        const { composeWithDevTools } = require('redux-devtools-extension')\r\n        return composeWithDevTools(applyMiddleware(...middleware))\r\n    }\r\n    return applyMiddleware(...middleware)\r\n}\r\n\r\n\r\nconst createStoreApp = (initialState = rootInitialState) => {\r\n\r\n    const store = createStore(rootReducer, initialState, bindMiddleware([sagaMiddleware]));\r\n\r\n    store.runSagaTask = () => {\r\n        store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    };\r\n\r\n    store.runSagaTask();\r\n    return store;\r\n}\r\n\r\nexport default createStoreApp"]},"metadata":{},"sourceType":"module"}