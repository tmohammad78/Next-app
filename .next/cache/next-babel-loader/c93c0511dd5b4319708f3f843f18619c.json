{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(runClockSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadDataSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, delay, put, take, takeLatest } from 'redux-saga/effects';\nimport { actionTypes, failure, loadDataSuccess, tickClock } from \"./action\";\n\nfunction runClockSaga() {\n  return _regeneratorRuntime.wrap(function runClockSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return take(actionTypes.START_CLOCK);\n\n        case 2:\n          if (!true) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 5;\n          return put(tickClock(false));\n\n        case 5:\n          _context.next = 7;\n          return delay(1000);\n\n        case 7:\n          _context.next = 2;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction loadDataSaga() {\n  var res, data;\n  return _regeneratorRuntime.wrap(function loadDataSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return fetch('https://jsonplaceholder.typicode.com/users');\n\n        case 3:\n          res = _context2.sent;\n          _context2.next = 6;\n          return res.json();\n\n        case 6:\n          data = _context2.sent;\n          _context2.next = 9;\n          return put(loadDataSuccess(data));\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 15;\n          return put(failure(_context2.t0));\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 11]]);\n}\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([call(runClockSaga), takeLatest(actionTypes.LOAD_DATA, loadDataSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["E:/MainProject/frontend/Next-app/saga.ts"],"names":["runClockSaga","loadDataSaga","rootSaga","all","call","delay","put","take","takeLatest","actionTypes","failure","loadDataSuccess","tickClock","START_CLOCK","fetch","res","json","data","LOAD_DATA"],"mappings":";;oDAGUA,Y;qDAQAC,Y;qDAUAC,Q;;AArBV,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,SAAhD;;AAEA,SAAUZ,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,IAAI,CAACE,WAAW,CAACI,WAAb,CAAV;;AADJ;AAAA,eAEW,IAFX;AAAA;AAAA;AAAA;;AAAA;AAGQ,iBAAMP,GAAG,CAACM,SAAS,CAAC,KAAD,CAAV,CAAT;;AAHR;AAAA;AAIQ,iBAAMP,KAAK,CAAC,IAAD,CAAX;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUJ,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEoB,iBAAMa,KAAK,CAAC,4CAAD,CAAX;;AAFpB;AAEcC,UAAAA,GAFd;AAAA;AAGqB,iBAAMA,GAAG,CAACC,IAAJ,EAAN;;AAHrB;AAGcC,UAAAA,IAHd;AAAA;AAIQ,iBAAMX,GAAG,CAACK,eAAe,CAACM,IAAD,CAAhB,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQ,iBAAMX,GAAG,CAACI,OAAO,cAAR,CAAT;;AANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUR,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACJ,YAAD,CADE,EAENQ,UAAU,CAACC,WAAW,CAACS,SAAb,EAAwBjB,YAAxB,CAFJ,CAAD,CAAT;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAeC,QAAf","sourcesContent":["import { all, call, delay, put, take, takeLatest } from 'redux-saga/effects'\r\nimport { actionTypes, failure, loadDataSuccess, tickClock } from './action'\r\n\r\nfunction* runClockSaga() {\r\n    yield take(actionTypes.START_CLOCK)\r\n    while (true) {\r\n        yield put(tickClock(false))\r\n        yield delay(1000)\r\n    }\r\n}\r\n\r\nfunction* loadDataSaga() {\r\n    try {\r\n        const res = yield fetch('https://jsonplaceholder.typicode.com/users')\r\n        const data = yield res.json()\r\n        yield put(loadDataSuccess(data))\r\n    } catch (err) {\r\n        yield put(failure(err))\r\n    }\r\n}\r\n\r\nfunction* rootSaga() {\r\n    yield all([\r\n        call(runClockSaga),\r\n        takeLatest(actionTypes.LOAD_DATA, loadDataSaga),\r\n    ])\r\n}\r\n\r\nexport default rootSaga"]},"metadata":{},"sourceType":"module"}