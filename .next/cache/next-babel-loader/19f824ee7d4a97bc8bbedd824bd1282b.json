{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\MainProject\\\\frontend\\\\Next-app\\\\pages\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// import React, { useEffect } from 'react';\n// import { useDispatch } from 'react-redux'\n// import { END } from 'redux-saga'\n// import { increment, startClock, tickClock } from '../action';\n// import Head from 'next/head';\n// import { wrapper } from '../redux/store';\n// function Home() {\n//   useEffect(() => {\n//     dispatch(startClock())\n//   }, [dispatch])\n//   return (\n//     <div className=\"container\">\n//       test\n//     </div>\n//   )\n// }\n// export default Home;\n// export const getStaticProps = wrapper.getStaticProps(async ({ store }) => {\n//   store.dispatch(increment())\n//   // if (!store.getState().placeholderData) {\n//   //   store.dispatch(loadData())\n//   //   store.dispatch(END)\n//   // }\n//   await store.sagaTask.toPromise()\n// })\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { requestInit } from \"../redux/actions/olaf\"; // import Page from '../containers/page';\n\nvar Index = /*#__PURE__*/function (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  var _super = _createSuper(Index);\n\n  function Index() {\n    _classCallCheck(this, Index);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 12\n        }\n      }, \"dkfkdu\");\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(props) {\n        var _props$ctx, store, isServer, state;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _props$ctx = props.ctx, store = _props$ctx.store, isServer = _props$ctx.isServer;\n                state = store.getState();\n\n                if (!state.receiveData.get('description')) {\n                  store.dispatch(requestInit(state.selectedDescription));\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default connect()(Index);","map":{"version":3,"sources":["E:/MainProject/frontend/Next-app/pages/index.tsx"],"names":["React","connect","requestInit","Index","props","ctx","store","isServer","state","getState","receiveData","get","dispatch","selectedDescription","Component"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,WAAT,gC,CACA;;IAEMC,K;;;;;;;;;;;;;wCASgB,CAAG;;;6BAEd;AACP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD;;;;uGAZ4BC,K;;;;;;;6BACCA,KAAK,CAACC,G,EAA1BC,K,cAAAA,K,EAAOC,Q,cAAAA,Q;AACTC,gBAAAA,K,GAAQF,KAAK,CAACG,QAAN,E;;AACd,oBAAI,CAACD,KAAK,CAACE,WAAN,CAAkBC,GAAlB,CAAsB,aAAtB,CAAL,EAA2C;AACzCL,kBAAAA,KAAK,CAACM,QAAN,CAAeV,WAAW,CAACM,KAAK,CAACK,mBAAP,CAA1B;AACD;;;;;;;;;;;;;;;;;;;EANeb,KAAK,CAACc,S;;AAgB1B,eAAeb,OAAO,GAAGE,KAAH,CAAtB","sourcesContent":["// import React, { useEffect } from 'react';\r\n// import { useDispatch } from 'react-redux'\r\n// import { END } from 'redux-saga'\r\n// import { increment, startClock, tickClock } from '../action';\r\n// import Head from 'next/head';\r\n// import { wrapper } from '../redux/store';\r\n// function Home() {\r\n//   useEffect(() => {\r\n//     dispatch(startClock())\r\n//   }, [dispatch])\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       test\r\n//     </div>\r\n//   )\r\n\r\n// }\r\n\r\n\r\n\r\n// export default Home;\r\n\r\n// export const getStaticProps = wrapper.getStaticProps(async ({ store }) => {\r\n//   store.dispatch(increment())\r\n\r\n//   // if (!store.getState().placeholderData) {\r\n//   //   store.dispatch(loadData())\r\n//   //   store.dispatch(END)\r\n//   // }\r\n\r\n//   await store.sagaTask.toPromise()\r\n// })\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { requestInit } from '../redux/actions/olaf';\r\n// import Page from '../containers/page';\r\n\r\nclass Index extends React.Component {\r\n  static async getInitialProps(props) {\r\n    const { store, isServer } = props.ctx;\r\n    const state = store.getState();\r\n    if (!state.receiveData.get('description')) {\r\n      store.dispatch(requestInit(state.selectedDescription));\r\n    }\r\n  }\r\n\r\n  componentDidMount() { }\r\n\r\n  render() {\r\n    return <div>dkfkdu</div>;\r\n  }\r\n}\r\n\r\nexport default connect()(Index);\r\n"]},"metadata":{},"sourceType":"module"}