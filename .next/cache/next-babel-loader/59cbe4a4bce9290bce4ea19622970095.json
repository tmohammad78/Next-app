{"ast":null,"code":"import { all, call, delay, put, take, takeLatest } from 'redux-saga/effects';\nimport { actionTypes, failure, loadDataSuccess, tickClock } from \"./action\";\n\nfunction* runClockSaga() {\n  yield take(actionTypes.START_CLOCK);\n\n  while (true) {\n    yield put(tickClock(false));\n    yield delay(1000);\n  }\n}\n\nfunction* loadDataSaga() {\n  try {\n    const res = yield fetch('https://jsonplaceholder.typicode.com/users');\n    const data = yield res.json();\n    yield put(loadDataSuccess(data));\n  } catch (err) {\n    yield put(failure(err));\n  }\n}\n\nfunction* rootSaga() {\n  yield all([call(runClockSaga), takeLatest(actionTypes.LOAD_DATA, loadDataSaga)]);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["E:/MainProject/frontend/Next-app/saga.ts"],"names":["all","call","delay","put","take","takeLatest","actionTypes","failure","loadDataSuccess","tickClock","runClockSaga","START_CLOCK","loadDataSaga","res","fetch","data","json","err","rootSaga","LOAD_DATA"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,SAAhD;;AAEA,UAAUC,YAAV,GAAyB;AACrB,QAAMN,IAAI,CAACE,WAAW,CAACK,WAAb,CAAV;;AACA,SAAO,IAAP,EAAa;AACT,UAAMR,GAAG,CAACM,SAAS,CAAC,KAAD,CAAV,CAAT;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACH;AACJ;;AAED,UAAUU,YAAV,GAAyB;AACrB,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,UAAMb,GAAG,CAACK,eAAe,CAACO,IAAD,CAAhB,CAAT;AACH,GAJD,CAIE,OAAOE,GAAP,EAAY;AACV,UAAMd,GAAG,CAACI,OAAO,CAACU,GAAD,CAAR,CAAT;AACH;AACJ;;AAED,UAAUC,QAAV,GAAqB;AACjB,QAAMlB,GAAG,CAAC,CACNC,IAAI,CAACS,YAAD,CADE,EAENL,UAAU,CAACC,WAAW,CAACa,SAAb,EAAwBP,YAAxB,CAFJ,CAAD,CAAT;AAIH;;AAED,eAAeM,QAAf","sourcesContent":["import { all, call, delay, put, take, takeLatest } from 'redux-saga/effects'\r\nimport { actionTypes, failure, loadDataSuccess, tickClock } from './action'\r\n\r\nfunction* runClockSaga() {\r\n    yield take(actionTypes.START_CLOCK)\r\n    while (true) {\r\n        yield put(tickClock(false))\r\n        yield delay(1000)\r\n    }\r\n}\r\n\r\nfunction* loadDataSaga() {\r\n    try {\r\n        const res = yield fetch('https://jsonplaceholder.typicode.com/users')\r\n        const data = yield res.json()\r\n        yield put(loadDataSuccess(data))\r\n    } catch (err) {\r\n        yield put(failure(err))\r\n    }\r\n}\r\n\r\nfunction* rootSaga() {\r\n    yield all([\r\n        call(runClockSaga),\r\n        takeLatest(actionTypes.LOAD_DATA, loadDataSaga),\r\n    ])\r\n}\r\n\r\nexport default rootSaga"]},"metadata":{},"sourceType":"module"}